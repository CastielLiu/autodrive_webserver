"""
Django settings for autodrive_webserver project.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*7*lu8sw4yoy9nd&w_*f_#)ws#_tqeqda8y5w!n0e5!ya-c76f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 当使用runserver时需要跟上0.0.0.0:port参数 这是客户端访问的第一道屏障通过之后才检测ALLOWED_HOSTS
# 允许被访问的地址, '*'允许所有
# ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = ['127.0.0.1', '192.168.1.100', '192.168.0.173', '36.155.113.13']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',  # for websockets
    'apps.autodrive',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'autodrive_webserver.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'autodrive_webserver.wsgi.application'
ASGI_APPLICATION = 'autodrive_webserver.routing.application'

# django 本身不支持websocket协议，可以通过使用channel实现对django的支持
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('localhost', 6379)],
#         },
#     },
# }

REDIS = {
    'HOST': '127.0.0.1',
    'PORT': 6379,
    'DB': 3,
    'PASSWORD': None,
    'CHANNELS': {
        "TO_HTTP": 'publish_to_http',
        "TO_WS": 'publish_to_websocket',
    }
}

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'driverless',
        'USER': 'castiel',
        'PASSWORD': 'castiel_pw',
        'HOST': '36.155.113.13',  # 127.0.0.1  36.155.113.13
        'PORT': '3306',
        'CHARSET': 'utf8'
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'  # en-us

TIME_ZONE = 'Asia/Shanghai'  # 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
# uwsgi或nginx或runserver非调试模式下所需要的静态文件目录
STATIC_ROOT = os.path.join(BASE_DIR, "collectstatic")

# 上传文件和文件夹的权限
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755
FILE_UPLOAD_PERMISSIONS = 0o644

# 上传文件的根目录, django默认本地storage的路径
# 经数据库模型FileField字段保存的文件,默认情况下数据库只保存文件的相对MEDIA_ROOT路径名, 并将文件存储于本地
# 修改DEFAULT_FILE_STORAGE可以全局控制数据库文件存储器, 目前django仅提供了本地存储方案且为默认
# 用户可自行设计存储器并通过FileField中storage传参实现个性化
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploadfiles/')
# django的admin默认使用该URL访问上传的文件,为保证后台能够正常查看文件, 此处直接写到了子路由
MEDIA_URL = '/autodrive/upload/'  # 这个是在浏览器上访问上传文件的url的前缀

SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # 引擎（使用数据库作为引擎）
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # 是否关闭浏览器使得Session过期（默认 False）
SESSION_COOKIE_AGE = 1209600  # Session的cookie失效日期（2周）（默认1209600s）
SESSION_COOKIE_NAME = "sessionid"  # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）
SESSION_COOKIE_PATH = "/"  # Session的cookie保存的路径（默认）
SESSION_COOKIE_DOMAIN = None  # Session的cookie保存的域名（默认）
SESSION_COOKIE_SECURE = False  # 是否Https传输cookie（默认）
SESSION_COOKIE_HTTPONLY = True  # 是否Session的cookie只支持http传输（默认）
SESSION_SAVE_EVERY_REQUEST = False  # 是否每次请求都保存Session，默认修改之后才保存（默认）
